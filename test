// НАЙТИ ЧИСЛО КОТОРОЕ ПРИСУТСТВУЕТ ПО ВСЕХ ТРЕХ МАССИВАХ
// let arr1 = [1,2,5]
// let arr2 = [3,3,4,5]
// let arr3 = [2,3,4,5,6]


// function findNumber(...args){
//     let bigArr = []
//     for (let arg of args){
//         bigArr.push(...arg)
//     }
//     for (let i = 0; i <= bigArr.length; i++){
//         if (arr1.includes(bigArr[i]) && arr2.includes(bigArr[i]) && arr3.includes(bigArr[i])){
//             return bigArr[i]
//         }
//     }
// }

// НАЙТИ ПАРУ ИНДЕКСОВ СУММА ЗНАЧЕНИЙ КОТОРЫХ БУДЕТ РАВНА TARGET
// let arr = [2,5,5,11]
function twoSum(nums, target){
    for (let i = 0; i < nums.length; i++){
        for(let j = i+1; j < nums.length; j++){

            if(nums[i] + nums[j] === target){
                return [i,j]
            }

        }
    }
};


// НАЙТИ САМУЮ ДЛИННУЮ ПОДСТРОКУ В СТРОКЕ
function lengthOfLongestSubstring(s){

    let longestSubstring = "";
    for (let i = 0; i < s.length; i++) {
        let currentSubstring = "";
        for (let j = i; j < s.length; j++) {
            // const char = s[j];
            if (currentSubstring.includes(s[j])) {
                break;
            }
            currentSubstring += s[j];
        }
        if (currentSubstring.length > longestSubstring.length) {
            longestSubstring = currentSubstring;
        }
    }
    return longestSubstring.length;
};



// НАЙТИ МЕДИАНУ ДВУХ ОТСОРТИРОВАННЫХ МАССИВОВ
function findMedianSortedArrays(nums1, nums2) {

    let bigArr = [...nums1, ...nums2].sort((a,b)=>a-b)

    if (bigArr.length % 2 !== 0){
        return bigArr[(bigArr.length-1)/2]
    }
    else {
        let firstHalf = bigArr.slice(0,bigArr.length/2) // деление массива пополам
        let secondHalf = bigArr.slice(bigArr.length/2)

        return (firstHalf[firstHalf.length-1] + secondHalf[0])/2
    }
};

console.log(findMedianSortedArrays([1,2,3,6,7],[4]))


function binarySearch(arr,item){
    let start = 0
    let end = arr.length - 1
    while (start <= end){
        let mid = Math.floor((start + end) / 2)
        if (arr[mid] === item){
            return `${arr[mid]} по индексу ${mid}`
        }
        if (arr[mid] > item){
            end = mid  - 1
        }
        else {
            start = mid + 1
        }
    }
    return `Такого элемента нет`
}

function fastSort(arr){
    if (arr.length <= 1)
        return arr

    let pivot = arr[Math.floor(Math.random() * arr.length)]

    let smallest = arr.filter(item => item < pivot)
    let largest = arr.filter(item => item > pivot)

    return [...fastSort(smallest), pivot, ...fastSort(largest)]
}

// console.log(fastSort([1,2,5,32,7,5,765,12,56,65]))

// console.log(binarySearch([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17], 17))


function addTwoNumbers(){
    let dummyHead = new ListNode(0)

}

adj = {A: ["B","C"], B:["D","F"], С:["F","G"],F:["D","G"], G:[],D:["M","G"] }

function deepFind(adj,v,t){
    if (v === t) return true
    if (v.visited) return  false

    v.visited = true

    for (let item of adj[v]){
        if (!item.visited){
            let reach = deepFind(adj,item,t)
            if (reach) return  true
        }
    }
    return false
}

function reverseInt(x){

    if (x < 0){
        return  -parseInt(x.toString().split("").reverse().join(""),10)
    }
    else {
        return parseInt(x.toString().split("").reverse().join(""),10)
    }
    // let temp = x > 0 ? x : x * -1
    // let result = 0
    // while (temp){
    //     result = result * 10 + temp % 10
    //     temp = Math.floor(temp / 10)
    // }
    //
    // return x > 0 ? result : result * -1
}


// s.charAt(0).toString() !== "+" || s.charAt(0).toString() !== "-"
function myAtoi(s){
    let nums = [1,2,3,4,5,6,7,8,9,0]
    let res = ""
    if (!nums.includes(parseInt(s.charAt(0))))
        return 0
    for (let char of s) {
        if (nums.includes(parseInt(char)) || char === "+" || char === "-"){
            res += char
        }
        else {break}
    }
    return res
}

console.log(myAtoi("-042"))
let test1 = [[1,3],[2,6],[8,10],[15,18]]

function mergeIntervals(arr){
    if (arr.length < 2) return arr

    arr.sort((a,b)=> a[0]-b[0])

    let result = [arr[0]]

    for (let interval of arr){
        let recent = result[result.length-1]

        if (recent[1] >= interval[0]){
            result[result.length-1][1] = Math.max(recent[1],interval[1])
        }
        else {
            result.push(interval)
        }
    }

    return  result

}

function maxArea(arr){

    let maxArea = 0
    let tempArea = 0
    let start = 0
    let end = arr.length - 1

    while (start <= end){
        tempArea = Math.min(arr[start], arr[end]) * (end - start)
        maxArea = Math.max(maxArea, tempArea)

        if (arr[start] < arr[end]){
            start++
        } else {
            end--
        }
    }
    return maxArea
}
function intToRoman(num){

   let res = ""

    const intToRome = {
        'M': 1000,
        'CM': 900,
        'D': 500,
        'CD': 400,
        'C': 100,
        'XC': 90,
        'L': 50,
        'XL': 40,
        'X': 10,
        'IX': 9,
        'V': 5,
        'IV': 4,
        'I': 1
    }

    for (let i in intToRome) {
        while (num >= intToRome[i]) {
            res += i
            num -= intToRome[i]
        }
    }

    return res

}

// function longestPalindrome(s) {
//     let res = ""
//     let longestPalindrome = ""
//     for (let i = 0; i < s.length; i++) {
//             res += s[i]
//
//         if (res === res.split("").reverse().join("") && res.length > longestPalindrome.length ){
//
//             longestPalindrome = res
//         }
//
//     }
//     return longestPalindrome
// }


function longestPalindrome(s) {
    let check = (i, j) => {
        let left = i;
        let right = j - 1;

        while (left < right) {
            if (s.charAt(left) !== s.charAt(right)) {
                return false;
            }

            left++;
            right--;
        }

        return true;
    };

    for (let length = s.length; length > 0; length--) {
        for (let start = 0; start <= s.length - length; start++) {
            if (check(start, start + length)) {
                return s.substring(start, start + length);
            }
        }
    }

    return "";
}

const students = [
    {name:"alex",age:20},
    {name:"petr",age:20},
    {name:"pasha",age:24},
    {name:"misha",age:17},
]

function group(arr){
    let result = {}

    arr.forEach(elem =>{
        if(!result[elem.age]){
            result[elem.age] = [elem]
        }
        else {
            result[elem.age].push(elem)
        }
    })
    return result
}



function findTwoNumbers(arr,num){
    for(let i=0;i<arr.length;i++){
        for(let j=i+1;j<arr.length;j++){
            if (arr[i] + arr[j] === num){
                return [arr[i],arr[j]]
            }
        }
    }
}

function isPalindrome(str) {

    let cleanedStr = str.replace(/[^a-zA-Z0-9]/g,"").toLowerCase();

    for (let i = 0; i < Math.floor(cleanedStr.length/2); i++) {
        if (str[i] !== cleanedStr[cleanedStr.length - 1 - i]){
            return false
        }
    }
    return true
}



function groupCity(arr){
    let res ={}
    arr.forEach(elem => {
        if (!res[elem.city]){
            res[elem.city] = [elem];
        }
        else {
            res[elem.city].push(elem);
        }
    })
    return res
}


const array1 = [[1, 3], [2, 6], [8, 10], [15, 18]]; // [[1, 6], [8, 10], [15, 18]]
const array2 = [[1, 4], [4, 5]];
const array3 = [[11, 12], [2, 3], [5, 7], [1, 4], [8, 10], [6, 8]]; // [[1, 4], [5, 10], [11, 12]]

function merge(intervals) {
    intervals.sort((a,b)=> a[0] - b[0]);

    let result = [intervals[0]]

    // if (intervals.length < 1){
    //     return intervals
    // }
    for (let interval of intervals){
        let recent = result[result.length-1]

        if (recent[1] >= interval[0]){
            result[result.length - 1][1] = Math.max(recent[1], interval[1]);
        }
        else {
            result.push(interval)
        }
    }
    return result
}

console.log(merge(array1))



const obj = {
    a: {
        b: {
            c: 1,
            d: 2
        },
        e: 3
    },
    f: 4
};

// let res = {

// }
// const flattenObject = (obj) => {
//
//     for (let key in obj) {
//         if (!res[key]){
//             res += key
//         }
//         if (Object.keys(key).length > 0){
//             flattenObject(key)
//         }
//     }
//
//
//     return res
// }
//
// console.log(flattenObject(res))


function isUnic(arr){

    let unic = {}
    arr.forEach(elem => {
        if (unic[elem]){
            unic[elem]++;
        }
        else {
            unic[elem] = 1;
        }
    })

    for (let item in unic){
        if(unic[item] === 1)
            return item
    }
    // console.log(unic)
}


function sortString(str){
    let arr = str.split("")
    let obj = {}

    arr.forEach(elem => {
        if (!obj[elem]){
            obj[elem] = 1
        }
        else {
            obj[elem]++
        }
    })

    return Object.keys(obj).sort((a, b) => obj[a] - obj[b]).join("")
}

console.log(sortString("ccbbbaaaad"))

let res = 0
function sumArr(arr,index){
    if (arr.length === index){
        return 0
    }
    return arr[index] + sumArr(arr, index+1)
}




function fastSort(arr){
    if (arr.length <= 1) return arr
    let pivot = arr[Math.floor(Math.random() * arr.length)];


    let smallest = arr.filter((item => item < pivot))
    let largest = arr.filter((item => item > pivot))

    return [...fastSort(smallest), pivot, ...fastSort(largest)]

}
console.log(fastSort([1,3,4,6,43,12,65,7,34,22]))


// function largestPrefix(arr){
//
//     let res = arr[0].charAt(0)
//     let exit = false
//     while (true){
//         if (arr.map((item)=>{item.includes(0,res.length)})){
//             res += arr[0].charAt(res.length)
//         }
//         else {
//              break
//         }
//     }
//     return res
// }
// console.log(largestPrefix(["flower","flow","flight"]))


let profit1 = [7,1,5,3,6,4]
let profit2 = []

function maxProfit(arr){

    let res = 0

    for (let i = 0; i < arr.length; i++) {
        if (arr[i] > arr[i - 1]) {
            res += arr[i] - arr[i - 1]
        }
    }

    return res
}


let trap1 = [0,1,0,2,1,0,1,3,2,1,2,1]

function trap(arr){

    let maxLeft = arr[0]
    let maxRight = arr[arr.length-1]

    let left = 1
    let right = arr.length-2

    let res = 0

    while(left <= right){
        if (maxLeft <= maxRight){

            if (maxLeft - arr[left] > 0){
                res += maxLeft - arr[left]
            }
            maxLeft = Math.max(maxLeft, arr[left])
            left++
        }else {
            if (maxRight - arr[right] > 0){
                res += maxRight - arr[right]
            }
            maxRight = Math.max(maxRight, arr[right])
            right--
        }

    }

    return res
}

console.log(trap(trap1))


Array.prototype.myFilter = function (callback){
    let res = []

    for (let i= 0; i < this.length;i++){
        if (callback(this[i],i,this)){
            res.push(this[i])
        }
    }
    return res
}





function binarySearch(arr,item){
    let sortArr = arr.sort()
    let start = 0
    let end = sortArr.length - 1

    while (start <= end){
        let mid = Math.floor((end+start) / 2)

        if (sortArr[mid] === item){
            return `${sortArr[mid]} по индексу ${mid}`
        }
        if (sortArr[mid] > item){
            end = mid - 1;
        }
        else{
            start = mid + 1;
        }
    }
    return false
}


function findCommonElement(arr1, arr2, arr3) {
    let i = 0, j = 0, k = 0;

    while (i < arr1.length && j < arr2.length && k < arr3.length) {
        if (arr1[i] === arr2[j] && arr2[j] === arr3[k]) {
            return arr1[i];
        } else if (arr1[i] < arr2[j]) {
            i++;
        } else if (arr2[j] < arr3[k]) {
            j++;
        } else {
            k++;
        }
    }

    return null; // Или -1, если нужно показать, что общего элемента нет.
}


